
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 07 17:05:59 CST 2016
//----------------------------------------------------

package practica1;

import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 07 17:05:59 CST 2016
  */
public class sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\010\000\002\004\007" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\011\017\000\002\011\013\000\002\012\010\000\002\012" +
    "\003\000\002\013\004\000\002\013\003\000\002\014\021" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\004\004\001\002\000\006\022\012\036" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\024\027\001\002\000\010\004\025\022" +
    "\012\036\007\001\002\000\010\004\ufffe\022\ufffe\036\ufffe" +
    "\001\002\000\004\023\013\001\002\000\004\036\014\001" +
    "\002\000\004\024\015\001\002\000\006\012\020\035\016" +
    "\001\002\000\006\013\ufff8\025\ufff8\001\002\000\004\025" +
    "\024\001\002\000\004\025\ufffb\001\002\000\006\013\022" +
    "\025\ufffa\001\002\000\004\035\023\001\002\000\006\013" +
    "\ufff9\025\ufff9\001\002\000\010\004\ufffd\022\ufffd\036\ufffd" +
    "\001\002\000\004\002\000\001\002\000\010\004\uffff\022" +
    "\uffff\036\uffff\001\002\000\034\005\040\006\045\007\035" +
    "\010\037\011\047\014\043\015\030\016\036\020\044\021" +
    "\033\032\032\036\042\037\046\001\002\000\036\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\014\uffed\015\uffed\016" +
    "\uffed\020\uffed\021\uffed\024\uffed\032\uffed\036\uffed\037\uffed" +
    "\001\002\000\004\024\057\001\002\000\036\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\020\uffeb\021\uffeb\024\uffeb\032\uffeb\036\uffeb\037\uffeb\001" +
    "\002\000\036\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\024\uffea\032" +
    "\uffea\036\uffea\037\uffea\001\002\000\036\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\024\ufff1\032\ufff1\036\ufff1\037\ufff1\001\002" +
    "\000\034\005\040\006\045\007\035\010\037\011\047\014" +
    "\043\015\030\016\036\020\044\021\033\032\032\036\042" +
    "\037\046\001\002\000\036\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec" +
    "\024\uffec\032\uffec\036\uffec\037\uffec\001\002\000\034\005" +
    "\040\006\045\007\035\010\037\011\047\014\043\015\030" +
    "\016\036\020\044\021\033\032\032\036\042\037\046\001" +
    "\002\000\034\005\040\006\045\007\035\010\037\011\047" +
    "\014\043\015\030\016\036\020\044\021\033\032\032\036" +
    "\042\037\046\001\002\000\004\024\ufff7\001\002\000\036" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\020\ufff0\021\ufff0\024\ufff0\032\ufff0\036\ufff0" +
    "\037\ufff0\001\002\000\036\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\014\uffee\015\uffee\016\uffee\020\uffee\021\uffee" +
    "\024\uffee\032\uffee\036\uffee\037\uffee\001\002\000\036\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\020\uffe9\021\uffe9\024\uffe9\032\uffe9\036\uffe9\037" +
    "\uffe9\001\002\000\034\005\040\006\045\007\035\010\037" +
    "\011\047\014\043\015\030\016\036\020\044\021\033\032" +
    "\032\036\042\037\046\001\002\000\036\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\021\uffef\024\uffef\032\uffef\036\uffef\037\uffef\001\002" +
    "\000\034\005\040\006\045\007\035\010\037\011\047\014" +
    "\043\015\030\016\036\020\044\021\033\032\032\036\042" +
    "\037\046\001\002\000\036\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4" +
    "\024\ufff4\032\ufff4\036\ufff4\037\ufff4\001\002\000\034\005" +
    "\040\006\045\007\035\010\037\011\047\014\043\015\030" +
    "\016\036\020\044\021\033\032\032\036\042\037\046\001" +
    "\002\000\036\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\024\ufff3\032" +
    "\ufff3\036\ufff3\037\ufff3\001\002\000\034\005\040\006\045" +
    "\007\035\010\037\011\047\014\043\015\030\016\036\020" +
    "\044\021\033\032\032\036\042\037\046\001\002\000\036" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\020\ufff2\021\ufff2\024\ufff2\032\ufff2\036\ufff2" +
    "\037\ufff2\001\002\000\036\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5" +
    "\024\ufff5\032\ufff5\036\ufff5\037\ufff5\001\002\000\036\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\ufff6\021\ufff6\024\ufff6\032\ufff6\036\ufff6\037" +
    "\ufff6\001\002\000\006\017\060\031\061\001\002\000\004" +
    "\033\073\001\002\000\004\033\063\001\002\000\010\004" +
    "\ufffc\022\ufffc\036\ufffc\001\002\000\004\036\064\001\002" +
    "\000\004\013\065\001\002\000\004\036\066\001\002\000" +
    "\004\013\067\001\002\000\004\036\070\001\002\000\004" +
    "\034\071\001\002\000\004\025\072\001\002\000\010\004" +
    "\uffe7\022\uffe7\036\uffe7\001\002\000\004\037\074\001\002" +
    "\000\004\013\075\001\002\000\004\036\076\001\002\000" +
    "\004\013\077\001\002\000\004\037\100\001\002\000\004" +
    "\013\101\001\002\000\004\036\102\001\002\000\004\013" +
    "\103\001\002\000\004\036\104\001\002\000\004\034\105" +
    "\001\002\000\006\024\106\025\110\001\002\000\004\030" +
    "\111\001\002\000\010\004\uffe8\022\uffe8\036\uffe8\001\002" +
    "\000\010\004\uffe5\022\uffe5\036\uffe5\001\002\000\004\026" +
    "\112\001\002\000\004\037\113\001\002\000\004\024\121" +
    "\001\002\000\006\027\uffe3\037\uffe3\001\002\000\006\027" +
    "\117\037\113\001\002\000\006\027\uffe4\037\uffe4\001\002" +
    "\000\004\025\120\001\002\000\010\004\uffe6\022\uffe6\036" +
    "\uffe6\001\002\000\004\017\122\001\002\000\004\033\123" +
    "\001\002\000\004\037\124\001\002\000\004\013\125\001" +
    "\002\000\004\036\126\001\002\000\004\013\127\001\002" +
    "\000\004\037\130\001\002\000\004\013\131\001\002\000" +
    "\004\036\132\001\002\000\004\013\133\001\002\000\004" +
    "\036\134\001\002\000\004\034\135\001\002\000\004\025" +
    "\136\001\002\000\006\027\uffe2\037\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\004\001\001\000\006\003\007\004" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\016\006\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\030\010\040\015\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\055\015\033" +
    "\001\001\000\002\001\001\000\006\010\054\015\033\001" +
    "\001\000\006\010\052\015\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\050\015\033\001\001\000\002\001\001\000\006" +
    "\010\047\015\033\001\001\000\002\001\001\000\006\010" +
    "\051\015\033\001\001\000\002\001\001\000\006\010\053" +
    "\015\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\114\014\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;
    public ArrayList<Nodo> lista = new ArrayList<>();
    public ArrayList<Nodo> listaRet = new ArrayList<>();
    public void reiniciar(){
        lista.clear();
        listaRet.clear();
    }
    @Override
    public void syntax_error(Symbol sy) {
        Nodo t=(Nodo)sy.value;
        done_parsing();
        report_error("ERROR SINTACTICO: " + t.getLexema() + " [" +t.getFila()+ " , " +t.getColumna()+ "]" ,null);
        JOptionPane.showMessageDialog(null, "ERROR SINTACTICO: " + t.getLexema() + " [" +t.getFila()+ " , " +t.getColumna()+ "]");
    }
    @Override
    public void unrecovered_syntax_error( Symbol sy ) throws java.lang.Exception{
        System.out.println("No se ha podido recuperar...");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ret ::= CAD FLECHA RETORNO PARA CAD CM ID CM CAD CM ID CM ID PARC PTCM 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-14)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-14)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                                    //falta quitar comillas alas cadenas
                                    r.addHijo(a);
                                    r.addHijo(b);
                                    r.addHijo(c);
                                    r.addHijo(d);
                                    r.addHijo(e);
                                    r.addHijo(f);
                                    RESULT = r;
                                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ret",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listret ::= ret 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                 parser.listaRet.add(r);
                //RESULT = r;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listret",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listret ::= listret ret 
            {
              Nodo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo h1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo h2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        /*Nodo padre = new Nodo("LISTRET","LISTRET",0,0);
                        padre.addHijo(h1);
                        padre.addHijo(h2);
                        RESULT = padre;*/
                        parser.listaRet.add(h2);
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("listret",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // defres ::= PTCM 
            {
              Nodo RESULT =null;
		
                RESULT = null;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defres",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // defres ::= FLECHA RESERV CORA listret CORC PTCM 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                                        Nodo padre = new Nodo("LISTRES","LISTRES",0,0);
                                        for(Nodo e: parser.listaRet){
                                            padre.addHijo(e);
                                        }
                                        parser.reiniciar();
                                        RESULT = padre;
                                        //padre.addHijo(h);
                                        //RESULT = p;
                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defres",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // defret ::= ERROR PARA ID CM ID CM ID PARC PTCM 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		                                                  
                                                        p.addHijo(a);
                                                        p.addHijo(b);
                                                        p.addHijo(c);
                                                        RESULT = p;
                                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defret",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defret ::= RETORNO PARA CAD CM ID CM CAD CM ID CM ID PARC defres 
            {
              Nodo RESULT =null;
		int padreleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).left;
		int padreright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).right;
		Nodo padre = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                            padre.addHijo(a);
                            padre.addHijo(b);
                            padre.addHijo(c);
                            padre.addHijo(d);
                            padre.addHijo(e);
                            if(f!=null){
                                padre.addHijo(f);
                            }
                            RESULT = padre;
                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defret",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= BLANCO 
            {
              Nodo RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo bl = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = bl;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= TODO 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo td = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = td;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termino ::= CARRO 
            {
              Nodo RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo cr = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = cr;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // termino ::= DOBLE 
            {
              Nodo RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo db = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = db;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // termino ::= SIMPLE 
            {
              Nodo RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo sm = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = sm;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // termino ::= SALTO 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = s;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // termino ::= CAD 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo cad = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    RESULT = cad;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // termino ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = id;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= termino 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        RESULT = t;
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= PT expresion expresion 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                            p.addHijo(e1);
                                            p.addHijo(e2);
                                            RESULT = p;
                                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= OR expresion expresion 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                            p.addHijo(e1);
                                            p.addHijo(e2);
                                            RESULT = p;
                                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= INTER expresion 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                p.addHijo(e);
                                RESULT = p;
                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= MAS expresion 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                p.addHijo(e);
                                RESULT = p;
                                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= POR expresion 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                            p.addHijo(e);
                            RESULT = p;
                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // defer ::= expresion 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    //Nodo padre = new Nodo("EXPRESION","EXPRESION",0,0);
                    //padre.addHijo(e);
                    RESULT = e;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defer",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista ::= LETRA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                  parser.lista.add(l);
                //RESULT = l;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("lista",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista ::= lista CM LETRA 
            {
              Nodo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo ls = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo lt = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                        /*Nodo padre = new Nodo("LISTA","LISTA",0,0);
                        padre.addHijo(ls);
                        padre.addHijo(lt);
                        RESULT = padre;*/
                        parser.lista.add(lt);
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("lista",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defconj ::= lista 
            {
              Nodo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo ls = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                Nodo padre = new Nodo("LISTA","LISTA",0,0);
                for(Nodo e: parser.lista){
                    padre.addHijo(e);
                }
                //padre.hijos=parser.lista;
                parser.reiniciar();
                RESULT = padre;
                //RESULT = ls;
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defconj",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defconj ::= RANGO 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("RANGO","RANGO",0,0);
                    String array[] = r.getLexema().split("~");
                    Nodo h1 = new Nodo("",array[0],0,0);
                    Nodo h2 = new Nodo("",array[1],0,0);
                    padre.addHijo(h1);
                    padre.addHijo(h2);
                    RESULT = padre;
                   
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defconj",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= ID FLECHA defer FLECHA defret 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int def1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int def1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo def1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int def2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int def2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo def2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                                        Nodo padre= new Nodo("","ER",0,0);
                                        padre.addHijo(id);
                                        padre.addHijo(def1);
                                        padre.addHijo(def2);
                                        RESULT =  padre;
                                      
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= CONJ DSPT ID FLECHA defconj PTCM 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                                            Nodo padre;
                                            padre = c;
                                            padre.addHijo(id);
                                            padre.addHijo(def);
                                            RESULT = padre;
                                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lsent ::= sent 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                RESULT = s;
              
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("lsent",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lsent ::= lsent sent 
            {
              Nodo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo ls = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                    Nodo padre = new Nodo("lsent","lsent",0,0);
                    padre.addHijo(ls);
                    padre.addHijo(s);
                    RESULT = padre;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("lsent",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PORC lsent PORC 
            {
              Nodo RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo ls = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                            parser.raiz = new Nodo("","Raiz",0,0);
                            parser.raiz.addHijo(ls);
                            RESULT = parser.raiz; 
                            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

